<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="30420"><g><title>my_chess_ql`my_chess_ql::game::positionanalyzer::PositionAnalyzer::calc_legal_moves (6 samples, 0.02%)</title><rect x="0.0131%" y="133" width="0.0197%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="6"/><text x="0.2631%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.05%)</title><rect x="0.1677%" y="117" width="0.0493%" height="15" fill="rgb(217,0,24)" fg:x="51" fg:w="15"/><text x="0.4177%" y="127.50"></text></g><g><title>my_chess_ql`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.01%)</title><rect x="0.2170%" y="117" width="0.0131%" height="15" fill="rgb(221,193,54)" fg:x="66" fg:w="4"/><text x="0.4670%" y="127.50"></text></g><g><title>my_chess_ql`__rust_probestack (5 samples, 0.02%)</title><rect x="0.2301%" y="117" width="0.0164%" height="15" fill="rgb(248,212,6)" fg:x="70" fg:w="5"/><text x="0.4801%" y="127.50"></text></g><g><title>my_chess_ql`&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (41 samples, 0.13%)</title><rect x="0.4931%" y="85" width="0.1348%" height="15" fill="rgb(208,68,35)" fg:x="150" fg:w="41"/><text x="0.7431%" y="95.50"></text></g><g><title>my_chess_ql`core::clone::impls::_&lt;impl core::clone::Clone for i32&gt;::clone (4 samples, 0.01%)</title><rect x="0.6279%" y="85" width="0.0131%" height="15" fill="rgb(232,128,0)" fg:x="191" fg:w="4"/><text x="0.8779%" y="95.50"></text></g><g><title>my_chess_ql`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for i32&gt;::lt (12 samples, 0.04%)</title><rect x="0.6410%" y="85" width="0.0394%" height="15" fill="rgb(207,160,47)" fg:x="195" fg:w="12"/><text x="0.8910%" y="95.50"></text></g><g><title>my_chess_ql`core::ptr::read (56 samples, 0.18%)</title><rect x="0.8021%" y="69" width="0.1841%" height="15" fill="rgb(228,23,34)" fg:x="244" fg:w="56"/><text x="1.0521%" y="79.50"></text></g><g><title>my_chess_ql`core::mem::replace (97 samples, 0.32%)</title><rect x="0.6805%" y="85" width="0.3189%" height="15" fill="rgb(218,30,26)" fg:x="207" fg:w="97"/><text x="0.9305%" y="95.50"></text></g><g><title>my_chess_ql`core::ptr::write (4 samples, 0.01%)</title><rect x="0.9862%" y="69" width="0.0131%" height="15" fill="rgb(220,122,19)" fg:x="300" fg:w="4"/><text x="1.2362%" y="79.50"></text></g><g><title>my_chess_ql`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (209 samples, 0.69%)</title><rect x="0.3254%" y="101" width="0.6870%" height="15" fill="rgb(250,228,42)" fg:x="99" fg:w="209"/><text x="0.5754%" y="111.50"></text></g><g><title>my_chess_ql`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (240 samples, 0.79%)</title><rect x="0.2465%" y="117" width="0.7890%" height="15" fill="rgb(240,193,28)" fg:x="75" fg:w="240"/><text x="0.4965%" y="127.50"></text></g><g><title>my_chess_ql`core::mem::replace (5 samples, 0.02%)</title><rect x="1.0191%" y="101" width="0.0164%" height="15" fill="rgb(216,20,37)" fg:x="310" fg:w="5"/><text x="1.2691%" y="111.50"></text></g><g><title>my_chess_ql`core::option::Option&lt;T&gt;::unwrap (4 samples, 0.01%)</title><rect x="1.0355%" y="117" width="0.0131%" height="15" fill="rgb(206,188,39)" fg:x="315" fg:w="4"/><text x="1.2855%" y="127.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (9 samples, 0.03%)</title><rect x="1.0487%" y="117" width="0.0296%" height="15" fill="rgb(217,207,13)" fg:x="319" fg:w="9"/><text x="1.2987%" y="127.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements (5 samples, 0.02%)</title><rect x="1.0782%" y="117" width="0.0164%" height="15" fill="rgb(231,73,38)" fg:x="328" fg:w="5"/><text x="1.3282%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (267 samples, 0.88%)</title><rect x="9.2636%" y="101" width="0.8777%" height="15" fill="rgb(225,20,46)" fg:x="2818" fg:w="267"/><text x="9.5136%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (9 samples, 0.03%)</title><rect x="10.1414%" y="101" width="0.0296%" height="15" fill="rgb(210,31,41)" fg:x="3085" fg:w="9"/><text x="10.3914%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (4 samples, 0.01%)</title><rect x="10.1775%" y="101" width="0.0131%" height="15" fill="rgb(221,200,47)" fg:x="3096" fg:w="4"/><text x="10.4275%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (6 samples, 0.02%)</title><rect x="10.1907%" y="101" width="0.0197%" height="15" fill="rgb(226,26,5)" fg:x="3100" fg:w="6"/><text x="10.4407%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (4 samples, 0.01%)</title><rect x="10.2104%" y="101" width="0.0131%" height="15" fill="rgb(249,33,26)" fg:x="3106" fg:w="4"/><text x="10.4604%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::ops::arith::AddAssign&gt;::add_assign (19 samples, 0.06%)</title><rect x="10.2235%" y="101" width="0.0625%" height="15" fill="rgb(235,183,28)" fg:x="3110" fg:w="19"/><text x="10.4735%" y="111.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (8 samples, 0.03%)</title><rect x="10.2860%" y="101" width="0.0263%" height="15" fill="rgb(221,5,38)" fg:x="3129" fg:w="8"/><text x="10.5360%" y="111.50"></text></g><g><title>my_chess_ql`__rust_probestack (9 samples, 0.03%)</title><rect x="10.3123%" y="101" width="0.0296%" height="15" fill="rgb(247,18,42)" fg:x="3137" fg:w="9"/><text x="10.5623%" y="111.50"></text></g><g><title>my_chess_ql`core::option::Option&lt;T&gt;::unwrap (12 samples, 0.04%)</title><rect x="10.3419%" y="101" width="0.0394%" height="15" fill="rgb(241,131,45)" fg:x="3146" fg:w="12"/><text x="10.5919%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (119 samples, 0.39%)</title><rect x="11.8376%" y="85" width="0.3912%" height="15" fill="rgb(249,31,29)" fg:x="3601" fg:w="119"/><text x="12.0876%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (574 samples, 1.89%)</title><rect x="10.3813%" y="101" width="1.8869%" height="15" fill="rgb(225,111,53)" fg:x="3158" fg:w="574"/><text x="10.6313%" y="111.50">m..</text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::king::King as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (12 samples, 0.04%)</title><rect x="12.2288%" y="85" width="0.0394%" height="15" fill="rgb(238,160,17)" fg:x="3720" fg:w="12"/><text x="12.4788%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (461 samples, 1.52%)</title><rect x="14.9277%" y="85" width="1.5155%" height="15" fill="rgb(214,148,48)" fg:x="4541" fg:w="461"/><text x="15.1777%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (641 samples, 2.11%)</title><rect x="17.2945%" y="69" width="2.1072%" height="15" fill="rgb(232,36,49)" fg:x="5261" fg:w="641"/><text x="17.5445%" y="79.50">l..</text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (10 samples, 0.03%)</title><rect x="19.4083%" y="69" width="0.0329%" height="15" fill="rgb(209,103,24)" fg:x="5904" fg:w="10"/><text x="19.6583%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (142 samples, 0.47%)</title><rect x="19.4412%" y="69" width="0.4668%" height="15" fill="rgb(229,88,8)" fg:x="5914" fg:w="142"/><text x="19.6912%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,893 samples, 6.22%)</title><rect x="16.4431%" y="85" width="6.2229%" height="15" fill="rgb(213,181,19)" fg:x="5002" fg:w="1893"/><text x="16.6931%" y="95.50">my_chess..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (839 samples, 2.76%)</title><rect x="19.9080%" y="69" width="2.7581%" height="15" fill="rgb(254,191,54)" fg:x="6056" fg:w="839"/><text x="20.1580%" y="79.50">my..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (212 samples, 0.70%)</title><rect x="21.9691%" y="53" width="0.6969%" height="15" fill="rgb(241,83,37)" fg:x="6683" fg:w="212"/><text x="22.2191%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (44 samples, 0.14%)</title><rect x="22.6660%" y="85" width="0.1446%" height="15" fill="rgb(233,36,39)" fg:x="6895" fg:w="44"/><text x="22.9160%" y="95.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (346 samples, 1.14%)</title><rect x="22.8107%" y="85" width="1.1374%" height="15" fill="rgb(226,3,54)" fg:x="6939" fg:w="346"/><text x="23.0607%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (164 samples, 0.54%)</title><rect x="23.4089%" y="69" width="0.5391%" height="15" fill="rgb(245,192,40)" fg:x="7121" fg:w="164"/><text x="23.6589%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (8 samples, 0.03%)</title><rect x="23.9481%" y="85" width="0.0263%" height="15" fill="rgb(238,167,29)" fg:x="7285" fg:w="8"/><text x="24.1981%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (44 samples, 0.14%)</title><rect x="24.3228%" y="69" width="0.1446%" height="15" fill="rgb(232,182,51)" fg:x="7399" fg:w="44"/><text x="24.5728%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (281 samples, 0.92%)</title><rect x="24.8455%" y="53" width="0.9237%" height="15" fill="rgb(231,60,39)" fg:x="7558" fg:w="281"/><text x="25.0955%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::default::Default&gt;::default (4 samples, 0.01%)</title><rect x="25.7692%" y="53" width="0.0131%" height="15" fill="rgb(208,69,12)" fg:x="7839" fg:w="4"/><text x="26.0192%" y="63.50"></text></g><g><title>my_chess_ql`__rust_probestack (212 samples, 0.70%)</title><rect x="25.7824%" y="53" width="0.6969%" height="15" fill="rgb(235,93,37)" fg:x="7843" fg:w="212"/><text x="26.0324%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,086 samples, 3.57%)</title><rect x="24.4675%" y="69" width="3.5700%" height="15" fill="rgb(213,116,39)" fg:x="7443" fg:w="1086"/><text x="24.7175%" y="79.50">my_c..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (474 samples, 1.56%)</title><rect x="26.4793%" y="53" width="1.5582%" height="15" fill="rgb(222,207,29)" fg:x="8055" fg:w="474"/><text x="26.7293%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (136 samples, 0.45%)</title><rect x="27.5904%" y="37" width="0.4471%" height="15" fill="rgb(206,96,30)" fg:x="8393" fg:w="136"/><text x="27.8404%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (219 samples, 0.72%)</title><rect x="28.5108%" y="53" width="0.7199%" height="15" fill="rgb(218,138,4)" fg:x="8673" fg:w="219"/><text x="28.7608%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::default::Default&gt;::default (4 samples, 0.01%)</title><rect x="29.2308%" y="53" width="0.0131%" height="15" fill="rgb(250,191,14)" fg:x="8892" fg:w="4"/><text x="29.4808%" y="63.50"></text></g><g><title>my_chess_ql`__rust_probestack (60 samples, 0.20%)</title><rect x="29.2538%" y="53" width="0.1972%" height="15" fill="rgb(239,60,40)" fg:x="8899" fg:w="60"/><text x="29.5038%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (240 samples, 0.79%)</title><rect x="29.4510%" y="53" width="0.7890%" height="15" fill="rgb(206,27,48)" fg:x="8959" fg:w="240"/><text x="29.7010%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (44 samples, 0.14%)</title><rect x="30.0953%" y="37" width="0.1446%" height="15" fill="rgb(225,35,8)" fg:x="9155" fg:w="44"/><text x="30.3453%" y="47.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,180 samples, 3.88%)</title><rect x="28.0375%" y="69" width="3.8790%" height="15" fill="rgb(250,213,24)" fg:x="8529" fg:w="1180"/><text x="28.2875%" y="79.50">my_c..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (510 samples, 1.68%)</title><rect x="30.2400%" y="53" width="1.6765%" height="15" fill="rgb(247,123,22)" fg:x="9199" fg:w="510"/><text x="30.4900%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (95 samples, 0.31%)</title><rect x="31.6042%" y="37" width="0.3123%" height="15" fill="rgb(231,138,38)" fg:x="9614" fg:w="95"/><text x="31.8542%" y="47.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::default::Default&gt;::default (4 samples, 0.01%)</title><rect x="31.9165%" y="69" width="0.0131%" height="15" fill="rgb(231,145,46)" fg:x="9709" fg:w="4"/><text x="32.1665%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::ops::arith::AddAssign&gt;::add_assign (34 samples, 0.11%)</title><rect x="31.9297%" y="69" width="0.1118%" height="15" fill="rgb(251,118,11)" fg:x="9713" fg:w="34"/><text x="32.1797%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="32.0414%" y="69" width="0.0230%" height="15" fill="rgb(217,147,25)" fg:x="9747" fg:w="7"/><text x="32.2914%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (7 samples, 0.02%)</title><rect x="32.0644%" y="69" width="0.0230%" height="15" fill="rgb(247,81,37)" fg:x="9754" fg:w="7"/><text x="32.3144%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (6 samples, 0.02%)</title><rect x="32.0874%" y="69" width="0.0197%" height="15" fill="rgb(209,12,38)" fg:x="9761" fg:w="6"/><text x="32.3374%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,476 samples, 8.14%)</title><rect x="23.9744%" y="85" width="8.1394%" height="15" fill="rgb(227,1,9)" fg:x="7293" fg:w="2476"/><text x="24.2244%" y="95.50">my_chess_ql..</text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (21 samples, 0.07%)</title><rect x="32.1137%" y="85" width="0.0690%" height="15" fill="rgb(248,47,43)" fg:x="9769" fg:w="21"/><text x="32.3637%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (433 samples, 1.42%)</title><rect x="33.0309%" y="69" width="1.4234%" height="15" fill="rgb(221,10,30)" fg:x="10048" fg:w="433"/><text x="33.2809%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::default::Default&gt;::default (9 samples, 0.03%)</title><rect x="34.4543%" y="69" width="0.0296%" height="15" fill="rgb(210,229,1)" fg:x="10481" fg:w="9"/><text x="34.7043%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="34.4839%" y="69" width="0.0131%" height="15" fill="rgb(222,148,37)" fg:x="10490" fg:w="4"/><text x="34.7339%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (195 samples, 0.64%)</title><rect x="34.4970%" y="69" width="0.6410%" height="15" fill="rgb(234,67,33)" fg:x="10494" fg:w="195"/><text x="34.7470%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (462 samples, 1.52%)</title><rect x="35.1381%" y="69" width="1.5187%" height="15" fill="rgb(247,98,35)" fg:x="10689" fg:w="462"/><text x="35.3881%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (104 samples, 0.34%)</title><rect x="36.3149%" y="53" width="0.3419%" height="15" fill="rgb(247,138,52)" fg:x="11047" fg:w="104"/><text x="36.5649%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,349 samples, 7.72%)</title><rect x="32.1828%" y="85" width="7.7219%" height="15" fill="rgb(213,79,30)" fg:x="9790" fg:w="2349"/><text x="32.4328%" y="95.50">my_chess_ql..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (988 samples, 3.25%)</title><rect x="36.6568%" y="69" width="3.2479%" height="15" fill="rgb(246,177,23)" fg:x="11151" fg:w="988"/><text x="36.9068%" y="79.50">my_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (123 samples, 0.40%)</title><rect x="39.5003%" y="53" width="0.4043%" height="15" fill="rgb(230,62,27)" fg:x="12016" fg:w="123"/><text x="39.7503%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (28 samples, 0.09%)</title><rect x="39.9047%" y="85" width="0.0920%" height="15" fill="rgb(216,154,8)" fg:x="12139" fg:w="28"/><text x="40.1547%" y="95.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (48 samples, 0.16%)</title><rect x="40.0033%" y="85" width="0.1578%" height="15" fill="rgb(244,35,45)" fg:x="12169" fg:w="48"/><text x="40.2533%" y="95.50"></text></g><g><title>my_chess_ql`__rust_probestack (7 samples, 0.02%)</title><rect x="40.1611%" y="85" width="0.0230%" height="15" fill="rgb(251,115,12)" fg:x="12217" fg:w="7"/><text x="40.4111%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,727 samples, 8.96%)</title><rect x="62.8764%" y="69" width="8.9645%" height="15" fill="rgb(240,54,50)" fg:x="19127" fg:w="2727"/><text x="63.1264%" y="79.50">libsystem_pla..</text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (98 samples, 0.32%)</title><rect x="71.8409%" y="69" width="0.3222%" height="15" fill="rgb(233,84,52)" fg:x="21854" fg:w="98"/><text x="72.0909%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (26 samples, 0.09%)</title><rect x="72.1631%" y="69" width="0.0855%" height="15" fill="rgb(207,117,47)" fg:x="21952" fg:w="26"/><text x="72.4131%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (51 samples, 0.17%)</title><rect x="72.2485%" y="69" width="0.1677%" height="15" fill="rgb(249,43,39)" fg:x="21978" fg:w="51"/><text x="72.4985%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (9,878 samples, 32.47%)</title><rect x="40.1841%" y="85" width="32.4721%" height="15" fill="rgb(209,38,44)" fg:x="12224" fg:w="9878"/><text x="40.4341%" y="95.50">my_chess_ql`my_chess_ql::game::pieces::piece::Piece::..</text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (73 samples, 0.24%)</title><rect x="72.4162%" y="69" width="0.2400%" height="15" fill="rgb(236,212,23)" fg:x="22029" fg:w="73"/><text x="72.6662%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (12 samples, 0.04%)</title><rect x="72.6561%" y="85" width="0.0394%" height="15" fill="rgb(242,79,21)" fg:x="22102" fg:w="12"/><text x="72.9061%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements (18,385 samples, 60.44%)</title><rect x="12.2682%" y="101" width="60.4372%" height="15" fill="rgb(211,96,35)" fg:x="3732" fg:w="18385"/><text x="12.5182%" y="111.50">my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (167 samples, 0.55%)</title><rect x="74.1289%" y="85" width="0.5490%" height="15" fill="rgb(253,215,40)" fg:x="22550" fg:w="167"/><text x="74.3789%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (671 samples, 2.21%)</title><rect x="75.3846%" y="69" width="2.2058%" height="15" fill="rgb(211,81,21)" fg:x="22932" fg:w="671"/><text x="75.6346%" y="79.50">l..</text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::default::Default&gt;::default (4 samples, 0.01%)</title><rect x="77.5904%" y="69" width="0.0131%" height="15" fill="rgb(208,190,38)" fg:x="23603" fg:w="4"/><text x="77.8404%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (17 samples, 0.06%)</title><rect x="77.6036%" y="69" width="0.0559%" height="15" fill="rgb(235,213,38)" fg:x="23607" fg:w="17"/><text x="77.8536%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (171 samples, 0.56%)</title><rect x="77.6594%" y="69" width="0.5621%" height="15" fill="rgb(237,122,38)" fg:x="23624" fg:w="171"/><text x="77.9094%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,050 samples, 6.74%)</title><rect x="74.6778%" y="85" width="6.7390%" height="15" fill="rgb(244,218,35)" fg:x="22717" fg:w="2050"/><text x="74.9278%" y="95.50">my_chess_..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (972 samples, 3.20%)</title><rect x="78.2216%" y="69" width="3.1953%" height="15" fill="rgb(240,68,47)" fg:x="23795" fg:w="972"/><text x="78.4716%" y="79.50">my_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (576 samples, 1.89%)</title><rect x="79.5233%" y="53" width="1.8935%" height="15" fill="rgb(210,16,53)" fg:x="24191" fg:w="576"/><text x="79.7733%" y="63.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (42 samples, 0.14%)</title><rect x="81.7456%" y="69" width="0.1381%" height="15" fill="rgb(235,124,12)" fg:x="24867" fg:w="42"/><text x="81.9956%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::king::King as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (145 samples, 0.48%)</title><rect x="81.4168%" y="85" width="0.4767%" height="15" fill="rgb(224,169,11)" fg:x="24767" fg:w="145"/><text x="81.6668%" y="95.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (268 samples, 0.88%)</title><rect x="81.8935%" y="85" width="0.8810%" height="15" fill="rgb(250,166,2)" fg:x="24912" fg:w="268"/><text x="82.1435%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (145 samples, 0.48%)</title><rect x="82.2978%" y="69" width="0.4767%" height="15" fill="rgb(242,216,29)" fg:x="25035" fg:w="145"/><text x="82.5478%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (53 samples, 0.17%)</title><rect x="83.1624%" y="69" width="0.1742%" height="15" fill="rgb(230,116,27)" fg:x="25298" fg:w="53"/><text x="83.4124%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (301 samples, 0.99%)</title><rect x="83.7640%" y="53" width="0.9895%" height="15" fill="rgb(228,99,48)" fg:x="25481" fg:w="301"/><text x="84.0140%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::default::Default&gt;::default (6 samples, 0.02%)</title><rect x="84.7535%" y="53" width="0.0197%" height="15" fill="rgb(253,11,6)" fg:x="25782" fg:w="6"/><text x="85.0035%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="84.7732%" y="53" width="0.0164%" height="15" fill="rgb(247,143,39)" fg:x="25788" fg:w="5"/><text x="85.0232%" y="63.50"></text></g><g><title>my_chess_ql`__rust_probestack (222 samples, 0.73%)</title><rect x="84.7896%" y="53" width="0.7298%" height="15" fill="rgb(236,97,10)" fg:x="25793" fg:w="222"/><text x="85.0396%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,135 samples, 3.73%)</title><rect x="83.3366%" y="69" width="3.7311%" height="15" fill="rgb(233,208,19)" fg:x="25351" fg:w="1135"/><text x="83.5866%" y="79.50">my_c..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (471 samples, 1.55%)</title><rect x="85.5194%" y="53" width="1.5483%" height="15" fill="rgb(216,164,2)" fg:x="26015" fg:w="471"/><text x="85.7694%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (109 samples, 0.36%)</title><rect x="86.7094%" y="37" width="0.3583%" height="15" fill="rgb(220,129,5)" fg:x="26377" fg:w="109"/><text x="86.9594%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (211 samples, 0.69%)</title><rect x="87.4951%" y="53" width="0.6936%" height="15" fill="rgb(242,17,10)" fg:x="26616" fg:w="211"/><text x="87.7451%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::default::Default&gt;::default (9 samples, 0.03%)</title><rect x="88.1887%" y="53" width="0.0296%" height="15" fill="rgb(242,107,0)" fg:x="26827" fg:w="9"/><text x="88.4387%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="88.2183%" y="53" width="0.0131%" height="15" fill="rgb(251,28,31)" fg:x="26836" fg:w="4"/><text x="88.4683%" y="63.50"></text></g><g><title>my_chess_ql`__rust_probestack (174 samples, 0.57%)</title><rect x="88.2314%" y="53" width="0.5720%" height="15" fill="rgb(233,223,10)" fg:x="26840" fg:w="174"/><text x="88.4814%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (295 samples, 0.97%)</title><rect x="88.8034%" y="53" width="0.9698%" height="15" fill="rgb(215,21,27)" fg:x="27014" fg:w="295"/><text x="89.0534%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.18%)</title><rect x="89.5957%" y="37" width="0.1775%" height="15" fill="rgb(232,23,21)" fg:x="27255" fg:w="54"/><text x="89.8457%" y="47.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,281 samples, 4.21%)</title><rect x="87.0677%" y="69" width="4.2110%" height="15" fill="rgb(244,5,23)" fg:x="26486" fg:w="1281"/><text x="87.3177%" y="79.50">my_ch..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (458 samples, 1.51%)</title><rect x="89.7732%" y="53" width="1.5056%" height="15" fill="rgb(226,81,46)" fg:x="27309" fg:w="458"/><text x="90.0232%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (60 samples, 0.20%)</title><rect x="91.0815%" y="37" width="0.1972%" height="15" fill="rgb(247,70,30)" fg:x="27707" fg:w="60"/><text x="91.3315%" y="47.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::ops::arith::AddAssign&gt;::add_assign (40 samples, 0.13%)</title><rect x="91.2788%" y="69" width="0.1315%" height="15" fill="rgb(212,68,19)" fg:x="27767" fg:w="40"/><text x="91.5288%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (11 samples, 0.04%)</title><rect x="91.4103%" y="69" width="0.0362%" height="15" fill="rgb(240,187,13)" fg:x="27807" fg:w="11"/><text x="91.6603%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (12 samples, 0.04%)</title><rect x="91.4464%" y="69" width="0.0394%" height="15" fill="rgb(223,113,26)" fg:x="27818" fg:w="12"/><text x="91.6964%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (5 samples, 0.02%)</title><rect x="91.4859%" y="69" width="0.0164%" height="15" fill="rgb(206,192,2)" fg:x="27830" fg:w="5"/><text x="91.7359%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,658 samples, 8.74%)</title><rect x="82.7745%" y="85" width="8.7377%" height="15" fill="rgb(241,108,4)" fg:x="25180" fg:w="2658"/><text x="83.0245%" y="95.50">my_chess_ql`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (447 samples, 1.47%)</title><rect x="92.3734%" y="69" width="1.4694%" height="15" fill="rgb(247,173,49)" fg:x="28100" fg:w="447"/><text x="92.6234%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="93.8527%" y="69" width="0.0197%" height="15" fill="rgb(224,114,35)" fg:x="28550" fg:w="6"/><text x="94.1027%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (156 samples, 0.51%)</title><rect x="93.8725%" y="69" width="0.5128%" height="15" fill="rgb(245,159,27)" fg:x="28556" fg:w="156"/><text x="94.1225%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (508 samples, 1.67%)</title><rect x="94.3853%" y="69" width="1.6700%" height="15" fill="rgb(245,172,44)" fg:x="28712" fg:w="508"/><text x="94.6353%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (254 samples, 0.83%)</title><rect x="95.2202%" y="53" width="0.8350%" height="15" fill="rgb(236,23,11)" fg:x="28966" fg:w="254"/><text x="95.4702%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,327 samples, 7.65%)</title><rect x="91.5122%" y="85" width="7.6496%" height="15" fill="rgb(205,117,38)" fg:x="27838" fg:w="2327"/><text x="91.7622%" y="95.50">my_chess_q..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (945 samples, 3.11%)</title><rect x="96.0552%" y="69" width="3.1065%" height="15" fill="rgb(237,72,25)" fg:x="29220" fg:w="945"/><text x="96.3052%" y="79.50">my_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (139 samples, 0.46%)</title><rect x="98.7048%" y="53" width="0.4569%" height="15" fill="rgb(244,70,9)" fg:x="30026" fg:w="139"/><text x="98.9548%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::default::Default&gt;::default (9 samples, 0.03%)</title><rect x="99.1617%" y="85" width="0.0296%" height="15" fill="rgb(217,125,39)" fg:x="30165" fg:w="9"/><text x="99.4117%" y="95.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::positionanalyzer::KingAttackRayAnalysis as core::ops::arith::AddAssign&gt;::add_assign (187 samples, 0.61%)</title><rect x="99.1913%" y="85" width="0.6147%" height="15" fill="rgb(235,36,10)" fg:x="30174" fg:w="187"/><text x="99.4413%" y="95.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (26 samples, 0.09%)</title><rect x="99.8060%" y="85" width="0.0855%" height="15" fill="rgb(251,123,47)" fg:x="30361" fg:w="26"/><text x="100.0560%" y="95.50"></text></g><g><title>my_chess_ql`__rust_probestack (6 samples, 0.02%)</title><rect x="99.8915%" y="85" width="0.0197%" height="15" fill="rgb(221,13,13)" fg:x="30387" fg:w="6"/><text x="100.1415%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (21 samples, 0.07%)</title><rect x="99.9112%" y="85" width="0.0690%" height="15" fill="rgb(238,131,9)" fg:x="30393" fg:w="21"/><text x="100.1612%" y="95.50"></text></g><g><title>0x1 (30,419 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9967%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="30419"/><text x="0.2500%" y="271.50">0x1</text></g><g><title>libdyld.dylib`start (30,419 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9967%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="30419"/><text x="0.2500%" y="255.50">libdyld.dylib`start</text></g><g><title>my_chess_ql`main (30,419 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9967%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="30419"/><text x="0.2500%" y="239.50">my_chess_ql`main</text></g><g><title>my_chess_ql`std::rt::lang_start (30,419 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9967%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="30419"/><text x="0.2500%" y="223.50">my_chess_ql`std::rt::lang_start</text></g><g><title>my_chess_ql`std::rt::lang_start_internal (30,419 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9967%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="30419"/><text x="0.2500%" y="207.50">my_chess_ql`std::rt::lang_start_internal</text></g><g><title>my_chess_ql`std::rt::lang_start::_{{closure}} (30,418 samples, 99.99%)</title><rect x="0.0033%" y="181" width="99.9934%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="30418"/><text x="0.2533%" y="191.50">my_chess_ql`std::rt::lang_start::_{{closure}}</text></g><g><title>my_chess_ql`std::sys_common::backtrace::__rust_begin_short_backtrace (30,418 samples, 99.99%)</title><rect x="0.0033%" y="165" width="99.9934%" height="15" fill="rgb(230,59,30)" fg:x="1" fg:w="30418"/><text x="0.2533%" y="175.50">my_chess_ql`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>my_chess_ql`core::ops::function::FnOnce::call_once (30,418 samples, 99.99%)</title><rect x="0.0033%" y="149" width="99.9934%" height="15" fill="rgb(209,121,21)" fg:x="1" fg:w="30418"/><text x="0.2533%" y="159.50">my_chess_ql`core::ops::function::FnOnce::call_once</text></g><g><title>my_chess_ql`my_chess_ql::main (30,409 samples, 99.96%)</title><rect x="0.0329%" y="133" width="99.9638%" height="15" fill="rgb(220,109,13)" fg:x="10" fg:w="30409"/><text x="0.2829%" y="143.50">my_chess_ql`my_chess_ql::main</text></g><g><title>my_chess_ql`my_chess_ql::game::positionanalyzer::PositionAnalyzer::calc_legal_moves (30,083 samples, 98.89%)</title><rect x="1.1045%" y="117" width="98.8922%" height="15" fill="rgb(232,18,1)" fg:x="336" fg:w="30083"/><text x="1.3545%" y="127.50">my_chess_ql`my_chess_ql::game::positionanalyzer::PositionAnalyzer::calc_legal_moves</text></g><g><title>my_chess_ql`my_chess_ql::game::positionanalyzer::PositionAnalyzer::calc_all_attacked_squares (8,302 samples, 27.29%)</title><rect x="72.7055%" y="101" width="27.2913%" height="15" fill="rgb(215,41,42)" fg:x="22117" fg:w="8302"/><text x="72.9555%" y="111.50">my_chess_ql`my_chess_ql::game::positionanaly..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (5 samples, 0.02%)</title><rect x="99.9803%" y="85" width="0.0164%" height="15" fill="rgb(224,123,36)" fg:x="30414" fg:w="5"/><text x="100.2303%" y="95.50"></text></g><g><title>all (30,420 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="30420"/><text x="0.2500%" y="287.50"></text></g></svg></svg>