<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="19446"><g><title>my_chess_ql`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.02%)</title><rect x="0.0000%" y="133" width="0.0206%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="143.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::movegenerator::MoveGenerator::calc_legal_moves (3 samples, 0.02%)</title><rect x="0.0206%" y="133" width="0.0154%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="3"/><text x="0.2706%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.06%)</title><rect x="0.3137%" y="117" width="0.0617%" height="15" fill="rgb(221,193,54)" fg:x="61" fg:w="12"/><text x="0.5637%" y="127.50"></text></g><g><title>my_chess_ql`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.01%)</title><rect x="0.3754%" y="117" width="0.0103%" height="15" fill="rgb(248,212,6)" fg:x="73" fg:w="2"/><text x="0.6254%" y="127.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (8 samples, 0.04%)</title><rect x="0.3857%" y="117" width="0.0411%" height="15" fill="rgb(208,68,35)" fg:x="75" fg:w="8"/><text x="0.6357%" y="127.50"></text></g><g><title>my_chess_ql`__rust_probestack (3 samples, 0.02%)</title><rect x="0.4268%" y="117" width="0.0154%" height="15" fill="rgb(232,128,0)" fg:x="83" fg:w="3"/><text x="0.6768%" y="127.50"></text></g><g><title>my_chess_ql`&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (29 samples, 0.15%)</title><rect x="0.9102%" y="85" width="0.1491%" height="15" fill="rgb(207,160,47)" fg:x="177" fg:w="29"/><text x="1.1602%" y="95.50"></text></g><g><title>my_chess_ql`core::clone::impls::_&lt;impl core::clone::Clone for i32&gt;::clone (4 samples, 0.02%)</title><rect x="1.0593%" y="85" width="0.0206%" height="15" fill="rgb(228,23,34)" fg:x="206" fg:w="4"/><text x="1.3093%" y="95.50"></text></g><g><title>my_chess_ql`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for i32&gt;::lt (6 samples, 0.03%)</title><rect x="1.0799%" y="85" width="0.0309%" height="15" fill="rgb(218,30,26)" fg:x="210" fg:w="6"/><text x="1.3299%" y="95.50"></text></g><g><title>my_chess_ql`core::ptr::read (38 samples, 0.20%)</title><rect x="1.2548%" y="69" width="0.1954%" height="15" fill="rgb(220,122,19)" fg:x="244" fg:w="38"/><text x="1.5048%" y="79.50"></text></g><g><title>my_chess_ql`core::mem::replace (70 samples, 0.36%)</title><rect x="1.1108%" y="85" width="0.3600%" height="15" fill="rgb(250,228,42)" fg:x="216" fg:w="70"/><text x="1.3608%" y="95.50"></text></g><g><title>my_chess_ql`core::ptr::write (4 samples, 0.02%)</title><rect x="1.4502%" y="69" width="0.0206%" height="15" fill="rgb(240,193,28)" fg:x="282" fg:w="4"/><text x="1.7002%" y="79.50"></text></g><g><title>my_chess_ql`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (182 samples, 0.94%)</title><rect x="0.5502%" y="101" width="0.9359%" height="15" fill="rgb(216,20,37)" fg:x="107" fg:w="182"/><text x="0.8002%" y="111.50"></text></g><g><title>my_chess_ql`core::ptr::write (2 samples, 0.01%)</title><rect x="1.4759%" y="85" width="0.0103%" height="15" fill="rgb(206,188,39)" fg:x="287" fg:w="2"/><text x="1.7259%" y="95.50"></text></g><g><title>my_chess_ql`&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (6 samples, 0.03%)</title><rect x="1.4862%" y="101" width="0.0309%" height="15" fill="rgb(217,207,13)" fg:x="289" fg:w="6"/><text x="1.7362%" y="111.50"></text></g><g><title>my_chess_ql`core::clone::impls::_&lt;impl core::clone::Clone for i32&gt;::clone (10 samples, 0.05%)</title><rect x="1.5170%" y="101" width="0.0514%" height="15" fill="rgb(231,73,38)" fg:x="295" fg:w="10"/><text x="1.7670%" y="111.50"></text></g><g><title>my_chess_ql`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (223 samples, 1.15%)</title><rect x="0.4423%" y="117" width="1.1468%" height="15" fill="rgb(225,20,46)" fg:x="86" fg:w="223"/><text x="0.6923%" y="127.50"></text></g><g><title>my_chess_ql`core::mem::replace (4 samples, 0.02%)</title><rect x="1.5684%" y="101" width="0.0206%" height="15" fill="rgb(210,31,41)" fg:x="305" fg:w="4"/><text x="1.8184%" y="111.50"></text></g><g><title>my_chess_ql`core::option::Option&lt;T&gt;::unwrap (6 samples, 0.03%)</title><rect x="1.5890%" y="117" width="0.0309%" height="15" fill="rgb(221,200,47)" fg:x="309" fg:w="6"/><text x="1.8390%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (138 samples, 0.71%)</title><rect x="13.7098%" y="101" width="0.7097%" height="15" fill="rgb(226,26,5)" fg:x="2666" fg:w="138"/><text x="13.9598%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (10 samples, 0.05%)</title><rect x="14.4194%" y="101" width="0.0514%" height="15" fill="rgb(249,33,26)" fg:x="2804" fg:w="10"/><text x="14.6694%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::king::King as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (3 samples, 0.02%)</title><rect x="14.4760%" y="101" width="0.0154%" height="15" fill="rgb(235,183,28)" fg:x="2815" fg:w="3"/><text x="14.7260%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (8 samples, 0.04%)</title><rect x="14.4914%" y="101" width="0.0411%" height="15" fill="rgb(221,5,38)" fg:x="2818" fg:w="8"/><text x="14.7414%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2 samples, 0.01%)</title><rect x="14.5326%" y="101" width="0.0103%" height="15" fill="rgb(247,18,42)" fg:x="2826" fg:w="2"/><text x="14.7826%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (9 samples, 0.05%)</title><rect x="14.5428%" y="101" width="0.0463%" height="15" fill="rgb(241,131,45)" fg:x="2828" fg:w="9"/><text x="14.7928%" y="111.50"></text></g><g><title>my_chess_ql`__rust_probestack (8 samples, 0.04%)</title><rect x="14.5891%" y="101" width="0.0411%" height="15" fill="rgb(249,31,29)" fg:x="2837" fg:w="8"/><text x="14.8391%" y="111.50"></text></g><g><title>my_chess_ql`core::option::Option&lt;T&gt;::unwrap (11 samples, 0.06%)</title><rect x="14.6303%" y="101" width="0.0566%" height="15" fill="rgb(225,111,53)" fg:x="2845" fg:w="11"/><text x="14.8803%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (49 samples, 0.25%)</title><rect x="15.4993%" y="85" width="0.2520%" height="15" fill="rgb(238,160,17)" fg:x="3014" fg:w="49"/><text x="15.7493%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (234 samples, 1.20%)</title><rect x="16.6410%" y="69" width="1.2033%" height="15" fill="rgb(214,148,48)" fg:x="3236" fg:w="234"/><text x="16.8910%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (5 samples, 0.03%)</title><rect x="17.8443%" y="69" width="0.0257%" height="15" fill="rgb(232,36,49)" fg:x="3470" fg:w="5"/><text x="18.0943%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,264 samples, 6.50%)</title><rect x="15.7513%" y="85" width="6.5001%" height="15" fill="rgb(209,103,24)" fg:x="3063" fg:w="1264"/><text x="16.0013%" y="95.50">my_chess_..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (852 samples, 4.38%)</title><rect x="17.8700%" y="69" width="4.3814%" height="15" fill="rgb(229,88,8)" fg:x="3475" fg:w="852"/><text x="18.1200%" y="79.50">my_ch..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (205 samples, 1.05%)</title><rect x="21.1972%" y="53" width="1.0542%" height="15" fill="rgb(213,181,19)" fg:x="4122" fg:w="205"/><text x="21.4472%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::king::King as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (117 samples, 0.60%)</title><rect x="22.2514%" y="85" width="0.6017%" height="15" fill="rgb(254,191,54)" fg:x="4327" fg:w="117"/><text x="22.5014%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (59 samples, 0.30%)</title><rect x="22.5496%" y="69" width="0.3034%" height="15" fill="rgb(241,83,37)" fg:x="4385" fg:w="59"/><text x="22.7996%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (84 samples, 0.43%)</title><rect x="22.8530%" y="85" width="0.4320%" height="15" fill="rgb(233,36,39)" fg:x="4444" fg:w="84"/><text x="23.1030%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (51 samples, 0.26%)</title><rect x="23.0227%" y="69" width="0.2623%" height="15" fill="rgb(226,3,54)" fg:x="4477" fg:w="51"/><text x="23.2727%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.09%)</title><rect x="23.4341%" y="69" width="0.0874%" height="15" fill="rgb(245,192,40)" fg:x="4557" fg:w="17"/><text x="23.6841%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (118 samples, 0.61%)</title><rect x="23.9844%" y="53" width="0.6068%" height="15" fill="rgb(238,167,29)" fg:x="4664" fg:w="118"/><text x="24.2344%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (939 samples, 4.83%)</title><rect x="23.5215%" y="69" width="4.8288%" height="15" fill="rgb(232,182,51)" fg:x="4574" fg:w="939"/><text x="23.7715%" y="79.50">my_che..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (730 samples, 3.75%)</title><rect x="24.5963%" y="53" width="3.7540%" height="15" fill="rgb(231,60,39)" fg:x="4783" fg:w="730"/><text x="24.8463%" y="63.50">my_c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (256 samples, 1.32%)</title><rect x="27.0338%" y="37" width="1.3165%" height="15" fill="rgb(208,69,12)" fg:x="5257" fg:w="256"/><text x="27.2838%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (43 samples, 0.22%)</title><rect x="28.8800%" y="53" width="0.2211%" height="15" fill="rgb(235,93,37)" fg:x="5616" fg:w="43"/><text x="29.1300%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="29.1011%" y="53" width="0.0103%" height="15" fill="rgb(213,116,39)" fg:x="5659" fg:w="2"/><text x="29.3511%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (185 samples, 0.95%)</title><rect x="29.1114%" y="53" width="0.9514%" height="15" fill="rgb(222,207,29)" fg:x="5661" fg:w="185"/><text x="29.3614%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (47 samples, 0.24%)</title><rect x="29.8210%" y="37" width="0.2417%" height="15" fill="rgb(206,96,30)" fg:x="5799" fg:w="47"/><text x="30.0710%" y="47.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (478 samples, 2.46%)</title><rect x="30.0627%" y="53" width="2.4581%" height="15" fill="rgb(218,138,4)" fg:x="5846" fg:w="478"/><text x="30.3127%" y="63.50">my..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (49 samples, 0.25%)</title><rect x="32.2688%" y="37" width="0.2520%" height="15" fill="rgb(250,191,14)" fg:x="6275" fg:w="49"/><text x="32.5188%" y="47.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (831 samples, 4.27%)</title><rect x="28.3503%" y="69" width="4.2734%" height="15" fill="rgb(239,60,40)" fg:x="5513" fg:w="831"/><text x="28.6003%" y="79.50">my_ch..</text></g><g><title>my_chess_ql`my_chess_ql::game::positionhelper::PositionHelper::rank_and_file_from_index (20 samples, 0.10%)</title><rect x="32.5208%" y="53" width="0.1028%" height="15" fill="rgb(206,27,48)" fg:x="6324" fg:w="20"/><text x="32.7708%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (8 samples, 0.04%)</title><rect x="32.6237%" y="69" width="0.0411%" height="15" fill="rgb(225,35,8)" fg:x="6344" fg:w="8"/><text x="32.8737%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (6 samples, 0.03%)</title><rect x="32.6648%" y="69" width="0.0309%" height="15" fill="rgb(250,213,24)" fg:x="6352" fg:w="6"/><text x="32.9148%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,832 samples, 9.42%)</title><rect x="23.2850%" y="85" width="9.4210%" height="15" fill="rgb(247,123,22)" fg:x="4528" fg:w="1832"/><text x="23.5350%" y="95.50">my_chess_ql`&lt;..</text></g><g><title>my_chess_ql`my_chess_ql::game::positionhelper::PositionHelper::rank_and_file_from_index (2 samples, 0.01%)</title><rect x="32.6957%" y="69" width="0.0103%" height="15" fill="rgb(231,138,38)" fg:x="6358" fg:w="2"/><text x="32.9457%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (92 samples, 0.47%)</title><rect x="34.0584%" y="69" width="0.4731%" height="15" fill="rgb(231,145,46)" fg:x="6623" fg:w="92"/><text x="34.3084%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="34.5315%" y="69" width="0.0103%" height="15" fill="rgb(251,118,11)" fg:x="6715" fg:w="2"/><text x="34.7815%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (335 samples, 1.72%)</title><rect x="34.5418%" y="69" width="1.7227%" height="15" fill="rgb(217,147,25)" fg:x="6717" fg:w="335"/><text x="34.7918%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (89 samples, 0.46%)</title><rect x="35.8068%" y="53" width="0.4577%" height="15" fill="rgb(247,81,37)" fg:x="6963" fg:w="89"/><text x="36.0568%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (860 samples, 4.42%)</title><rect x="36.2645%" y="69" width="4.4225%" height="15" fill="rgb(209,12,38)" fg:x="7052" fg:w="860"/><text x="36.5145%" y="79.50">my_ch..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (107 samples, 0.55%)</title><rect x="40.1368%" y="53" width="0.5502%" height="15" fill="rgb(227,1,9)" fg:x="7805" fg:w="107"/><text x="40.3868%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,631 samples, 8.39%)</title><rect x="32.7060%" y="85" width="8.3873%" height="15" fill="rgb(248,47,43)" fg:x="6360" fg:w="1631"/><text x="32.9560%" y="95.50">my_chess_ql`..</text></g><g><title>my_chess_ql`my_chess_ql::game::positionhelper::PositionHelper::rank_and_file_from_index (79 samples, 0.41%)</title><rect x="40.6870%" y="69" width="0.4063%" height="15" fill="rgb(221,10,30)" fg:x="7912" fg:w="79"/><text x="40.9370%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (6 samples, 0.03%)</title><rect x="41.0933%" y="85" width="0.0309%" height="15" fill="rgb(210,229,1)" fg:x="7991" fg:w="6"/><text x="41.3433%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (7 samples, 0.04%)</title><rect x="41.1241%" y="85" width="0.0360%" height="15" fill="rgb(222,148,37)" fg:x="7997" fg:w="7"/><text x="41.3741%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (8 samples, 0.04%)</title><rect x="41.1601%" y="85" width="0.0411%" height="15" fill="rgb(234,67,33)" fg:x="8004" fg:w="8"/><text x="41.4101%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::movegenerator::MoveGenerator::calc_all_attacked_squares (5,161 samples, 26.54%)</title><rect x="14.6868%" y="101" width="26.5402%" height="15" fill="rgb(247,98,35)" fg:x="2856" fg:w="5161"/><text x="14.9368%" y="111.50">my_chess_ql`my_chess_ql::game::movegenerat..</text></g><g><title>my_chess_ql`my_chess_ql::game::positionhelper::PositionHelper::rank_and_file_from_index (5 samples, 0.03%)</title><rect x="41.2013%" y="85" width="0.0257%" height="15" fill="rgb(247,138,52)" fg:x="8012" fg:w="5"/><text x="41.4513%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (333 samples, 1.71%)</title><rect x="41.2270%" y="101" width="1.7124%" height="15" fill="rgb(213,79,30)" fg:x="8017" fg:w="333"/><text x="41.4770%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::king::King as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (9 samples, 0.05%)</title><rect x="42.8931%" y="85" width="0.0463%" height="15" fill="rgb(246,177,23)" fg:x="8341" fg:w="9"/><text x="43.1431%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (61 samples, 0.31%)</title><rect x="45.0015%" y="85" width="0.3137%" height="15" fill="rgb(230,62,27)" fg:x="8751" fg:w="61"/><text x="45.2515%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (213 samples, 1.10%)</title><rect x="46.2923%" y="69" width="1.0953%" height="15" fill="rgb(216,154,8)" fg:x="9002" fg:w="213"/><text x="46.5423%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="47.3876%" y="69" width="0.0154%" height="15" fill="rgb(244,35,45)" fg:x="9215" fg:w="3"/><text x="47.6376%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,318 samples, 6.78%)</title><rect x="45.3152%" y="85" width="6.7777%" height="15" fill="rgb(251,115,12)" fg:x="8812" fg:w="1318"/><text x="45.5652%" y="95.50">my_chess_..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (912 samples, 4.69%)</title><rect x="47.4031%" y="69" width="4.6899%" height="15" fill="rgb(240,54,50)" fg:x="9218" fg:w="912"/><text x="47.6531%" y="79.50">my_ch..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (208 samples, 1.07%)</title><rect x="51.0233%" y="53" width="1.0696%" height="15" fill="rgb(233,84,52)" fg:x="9922" fg:w="208"/><text x="51.2733%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (91 samples, 0.47%)</title><rect x="52.0930%" y="85" width="0.4680%" height="15" fill="rgb(207,117,47)" fg:x="10130" fg:w="91"/><text x="52.3430%" y="95.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (108 samples, 0.56%)</title><rect x="52.5609%" y="85" width="0.5554%" height="15" fill="rgb(249,43,39)" fg:x="10221" fg:w="108"/><text x="52.8109%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (61 samples, 0.31%)</title><rect x="52.8026%" y="69" width="0.3137%" height="15" fill="rgb(209,38,44)" fg:x="10268" fg:w="61"/><text x="53.0526%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (23 samples, 0.12%)</title><rect x="53.1163%" y="85" width="0.1183%" height="15" fill="rgb(236,212,23)" fg:x="10329" fg:w="23"/><text x="53.3663%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (29 samples, 0.15%)</title><rect x="53.4403%" y="69" width="0.1491%" height="15" fill="rgb(242,79,21)" fg:x="10392" fg:w="29"/><text x="53.6903%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (134 samples, 0.69%)</title><rect x="54.3197%" y="53" width="0.6891%" height="15" fill="rgb(211,96,35)" fg:x="10563" fg:w="134"/><text x="54.5697%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (712 samples, 3.66%)</title><rect x="53.5894%" y="69" width="3.6614%" height="15" fill="rgb(253,215,40)" fg:x="10421" fg:w="712"/><text x="53.8394%" y="79.50">my_c..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (436 samples, 2.24%)</title><rect x="55.0087%" y="53" width="2.2421%" height="15" fill="rgb(211,81,21)" fg:x="10697" fg:w="436"/><text x="55.2587%" y="63.50">m..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (100 samples, 0.51%)</title><rect x="56.7366%" y="37" width="0.5142%" height="15" fill="rgb(208,190,38)" fg:x="11033" fg:w="100"/><text x="56.9866%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (31 samples, 0.16%)</title><rect x="57.7445%" y="53" width="0.1594%" height="15" fill="rgb(235,213,38)" fg:x="11229" fg:w="31"/><text x="57.9945%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="57.9039%" y="53" width="0.0154%" height="15" fill="rgb(237,122,38)" fg:x="11260" fg:w="3"/><text x="58.1539%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (184 samples, 0.95%)</title><rect x="57.9194%" y="53" width="0.9462%" height="15" fill="rgb(244,218,35)" fg:x="11263" fg:w="184"/><text x="58.1694%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (55 samples, 0.28%)</title><rect x="58.5827%" y="37" width="0.2828%" height="15" fill="rgb(240,68,47)" fg:x="11392" fg:w="55"/><text x="58.8327%" y="47.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (479 samples, 2.46%)</title><rect x="58.8656%" y="53" width="2.4632%" height="15" fill="rgb(210,16,53)" fg:x="11447" fg:w="479"/><text x="59.1156%" y="63.50">my..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (50 samples, 0.26%)</title><rect x="61.0717%" y="37" width="0.2571%" height="15" fill="rgb(235,124,12)" fg:x="11876" fg:w="50"/><text x="61.3217%" y="47.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (804 samples, 4.13%)</title><rect x="57.2508%" y="69" width="4.1345%" height="15" fill="rgb(224,169,11)" fg:x="11133" fg:w="804"/><text x="57.5008%" y="79.50">my_ch..</text></g><g><title>my_chess_ql`my_chess_ql::game::positionhelper::PositionHelper::rank_and_file_from_index (11 samples, 0.06%)</title><rect x="61.3288%" y="53" width="0.0566%" height="15" fill="rgb(250,166,2)" fg:x="11926" fg:w="11"/><text x="61.5788%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="61.3854%" y="69" width="0.0103%" height="15" fill="rgb(242,216,29)" fg:x="11937" fg:w="2"/><text x="61.6354%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (6 samples, 0.03%)</title><rect x="61.3957%" y="69" width="0.0309%" height="15" fill="rgb(230,116,27)" fg:x="11939" fg:w="6"/><text x="61.6457%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (3 samples, 0.02%)</title><rect x="61.4265%" y="69" width="0.0154%" height="15" fill="rgb(228,99,48)" fg:x="11945" fg:w="3"/><text x="61.6765%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,600 samples, 8.23%)</title><rect x="53.2346%" y="85" width="8.2279%" height="15" fill="rgb(253,11,6)" fg:x="10352" fg:w="1600"/><text x="53.4846%" y="95.50">my_chess_ql..</text></g><g><title>my_chess_ql`my_chess_ql::game::positionhelper::PositionHelper::rank_and_file_from_index (4 samples, 0.02%)</title><rect x="61.4419%" y="69" width="0.0206%" height="15" fill="rgb(247,143,39)" fg:x="11948" fg:w="4"/><text x="61.6919%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (52 samples, 0.27%)</title><rect x="61.4625%" y="85" width="0.2674%" height="15" fill="rgb(236,97,10)" fg:x="11952" fg:w="52"/><text x="61.7125%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (90 samples, 0.46%)</title><rect x="62.9075%" y="69" width="0.4628%" height="15" fill="rgb(233,208,19)" fg:x="12233" fg:w="90"/><text x="63.1575%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (386 samples, 1.98%)</title><rect x="63.3755%" y="69" width="1.9850%" height="15" fill="rgb(216,164,2)" fg:x="12324" fg:w="386"/><text x="63.6255%" y="79.50">m..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (126 samples, 0.65%)</title><rect x="64.7125%" y="53" width="0.6479%" height="15" fill="rgb(220,129,5)" fg:x="12584" fg:w="126"/><text x="64.9625%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (891 samples, 4.58%)</title><rect x="65.3605%" y="69" width="4.5819%" height="15" fill="rgb(242,17,10)" fg:x="12710" fg:w="891"/><text x="65.6105%" y="79.50">my_ch..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (108 samples, 0.56%)</title><rect x="69.3870%" y="53" width="0.5554%" height="15" fill="rgb(242,107,0)" fg:x="13493" fg:w="108"/><text x="69.6370%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,664 samples, 8.56%)</title><rect x="61.7299%" y="85" width="8.5570%" height="15" fill="rgb(251,28,31)" fg:x="12004" fg:w="1664"/><text x="61.9799%" y="95.50">my_chess_ql`..</text></g><g><title>my_chess_ql`my_chess_ql::game::positionhelper::PositionHelper::rank_and_file_from_index (67 samples, 0.34%)</title><rect x="69.9424%" y="69" width="0.3445%" height="15" fill="rgb(233,223,10)" fg:x="13601" fg:w="67"/><text x="70.1924%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (60 samples, 0.31%)</title><rect x="70.2869%" y="85" width="0.3085%" height="15" fill="rgb(215,21,27)" fg:x="13668" fg:w="60"/><text x="70.5369%" y="95.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (77 samples, 0.40%)</title><rect x="98.9664%" y="69" width="0.3960%" height="15" fill="rgb(232,23,21)" fg:x="19245" fg:w="77"/><text x="99.2164%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (20 samples, 0.10%)</title><rect x="99.3623%" y="69" width="0.1028%" height="15" fill="rgb(244,5,23)" fg:x="19322" fg:w="20"/><text x="99.6123%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (24 samples, 0.12%)</title><rect x="99.4652%" y="69" width="0.1234%" height="15" fill="rgb(226,81,46)" fg:x="19342" fg:w="24"/><text x="99.7152%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (5,682 samples, 29.22%)</title><rect x="70.6006%" y="85" width="29.2194%" height="15" fill="rgb(247,70,30)" fg:x="13729" fg:w="5682"/><text x="70.8506%" y="95.50">my_chess_ql`my_chess_ql::game::pieces::piece::P..</text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::get_piece_type (45 samples, 0.23%)</title><rect x="99.5886%" y="69" width="0.2314%" height="15" fill="rgb(212,68,19)" fg:x="19366" fg:w="45"/><text x="99.8386%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (12 samples, 0.06%)</title><rect x="99.8200%" y="85" width="0.0617%" height="15" fill="rgb(240,187,13)" fg:x="19411" fg:w="12"/><text x="100.0700%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (3 samples, 0.02%)</title><rect x="99.8817%" y="85" width="0.0154%" height="15" fill="rgb(223,113,26)" fg:x="19423" fg:w="3"/><text x="100.1317%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::movegenerator::MoveGenerator::calc_legal_moves (19,114 samples, 98.29%)</title><rect x="1.6199%" y="117" width="98.2927%" height="15" fill="rgb(206,192,2)" fg:x="315" fg:w="19114"/><text x="1.8699%" y="127.50">my_chess_ql`my_chess_ql::game::movegenerator::MoveGenerator::calc_legal_moves</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements (11,079 samples, 56.97%)</title><rect x="42.9394%" y="101" width="56.9732%" height="15" fill="rgb(241,108,4)" fg:x="8350" fg:w="11079"/><text x="43.1894%" y="111.50">my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements</text></g><g><title>my_chess_ql`my_chess_ql::game::positionhelper::PositionHelper::rank_and_file_from_index (3 samples, 0.02%)</title><rect x="99.8972%" y="85" width="0.0154%" height="15" fill="rgb(247,173,49)" fg:x="19426" fg:w="3"/><text x="100.1472%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (4 samples, 0.02%)</title><rect x="99.9126%" y="117" width="0.0206%" height="15" fill="rgb(224,114,35)" fg:x="19429" fg:w="4"/><text x="100.1626%" y="127.50"></text></g><g><title>all (19,446 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="287.50"></text></g><g><title>0x1 (19,446 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="271.50">0x1</text></g><g><title>libdyld.dylib`start (19,446 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="255.50">libdyld.dylib`start</text></g><g><title>my_chess_ql`main (19,446 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="239.50">my_chess_ql`main</text></g><g><title>my_chess_ql`std::rt::lang_start (19,446 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="223.50">my_chess_ql`std::rt::lang_start</text></g><g><title>my_chess_ql`std::rt::lang_start_internal (19,446 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="207.50">my_chess_ql`std::rt::lang_start_internal</text></g><g><title>my_chess_ql`std::rt::lang_start::_{{closure}} (19,446 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="191.50">my_chess_ql`std::rt::lang_start::_{{closure}}</text></g><g><title>my_chess_ql`std::sys_common::backtrace::__rust_begin_short_backtrace (19,446 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="175.50">my_chess_ql`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>my_chess_ql`core::ops::function::FnOnce::call_once (19,446 samples, 100.00%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="19446"/><text x="0.2500%" y="159.50">my_chess_ql`core::ops::function::FnOnce::call_once</text></g><g><title>my_chess_ql`my_chess_ql::main (19,439 samples, 99.96%)</title><rect x="0.0360%" y="133" width="99.9640%" height="15" fill="rgb(221,13,13)" fg:x="7" fg:w="19439"/><text x="0.2860%" y="143.50">my_chess_ql`my_chess_ql::main</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements (13 samples, 0.07%)</title><rect x="99.9331%" y="117" width="0.0669%" height="15" fill="rgb(238,131,9)" fg:x="19433" fg:w="13"/><text x="100.1831%" y="127.50"></text></g></svg></svg>