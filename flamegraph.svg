<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="33340"><g><title>my_chess_ql`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (30 samples, 0.09%)</title><rect x="0.0030%" y="133" width="0.0900%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="30"/><text x="0.2530%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (189 samples, 0.57%)</title><rect x="0.1830%" y="117" width="0.5669%" height="15" fill="rgb(217,0,24)" fg:x="61" fg:w="189"/><text x="0.4330%" y="127.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (30 samples, 0.09%)</title><rect x="0.7618%" y="117" width="0.0900%" height="15" fill="rgb(221,193,54)" fg:x="254" fg:w="30"/><text x="1.0118%" y="127.50"></text></g><g><title>my_chess_ql`&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (57 samples, 0.17%)</title><rect x="1.1428%" y="85" width="0.1710%" height="15" fill="rgb(248,212,6)" fg:x="381" fg:w="57"/><text x="1.3928%" y="95.50"></text></g><g><title>my_chess_ql`core::clone::impls::_&lt;impl core::clone::Clone for i32&gt;::clone (5 samples, 0.01%)</title><rect x="1.3137%" y="85" width="0.0150%" height="15" fill="rgb(208,68,35)" fg:x="438" fg:w="5"/><text x="1.5637%" y="95.50"></text></g><g><title>my_chess_ql`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for i32&gt;::lt (9 samples, 0.03%)</title><rect x="1.3287%" y="85" width="0.0270%" height="15" fill="rgb(232,128,0)" fg:x="443" fg:w="9"/><text x="1.5787%" y="95.50"></text></g><g><title>my_chess_ql`core::ptr::read (61 samples, 0.18%)</title><rect x="1.4397%" y="69" width="0.1830%" height="15" fill="rgb(207,160,47)" fg:x="480" fg:w="61"/><text x="1.6897%" y="79.50"></text></g><g><title>my_chess_ql`core::mem::replace (93 samples, 0.28%)</title><rect x="1.3557%" y="85" width="0.2789%" height="15" fill="rgb(228,23,34)" fg:x="452" fg:w="93"/><text x="1.6057%" y="95.50"></text></g><g><title>my_chess_ql`core::ptr::write (4 samples, 0.01%)</title><rect x="1.6227%" y="69" width="0.0120%" height="15" fill="rgb(218,30,26)" fg:x="541" fg:w="4"/><text x="1.8727%" y="79.50"></text></g><g><title>my_chess_ql`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (238 samples, 0.71%)</title><rect x="0.9238%" y="101" width="0.7139%" height="15" fill="rgb(220,122,19)" fg:x="308" fg:w="238"/><text x="1.1738%" y="111.50"></text></g><g><title>my_chess_ql`&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (4 samples, 0.01%)</title><rect x="1.6377%" y="101" width="0.0120%" height="15" fill="rgb(250,228,42)" fg:x="546" fg:w="4"/><text x="1.8877%" y="111.50"></text></g><g><title>my_chess_ql`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for i32&gt;::lt (9 samples, 0.03%)</title><rect x="1.6557%" y="101" width="0.0270%" height="15" fill="rgb(240,193,28)" fg:x="552" fg:w="9"/><text x="1.9057%" y="111.50"></text></g><g><title>my_chess_ql`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (281 samples, 0.84%)</title><rect x="0.8608%" y="117" width="0.8428%" height="15" fill="rgb(216,20,37)" fg:x="287" fg:w="281"/><text x="1.1108%" y="127.50"></text></g><g><title>my_chess_ql`core::mem::replace (7 samples, 0.02%)</title><rect x="1.6827%" y="101" width="0.0210%" height="15" fill="rgb(206,188,39)" fg:x="561" fg:w="7"/><text x="1.9327%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,494 samples, 4.48%)</title><rect x="10.8968%" y="101" width="4.4811%" height="15" fill="rgb(217,207,13)" fg:x="3633" fg:w="1494"/><text x="11.1468%" y="111.50">libsy..</text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::analysis::kingattackrayanalyzer::KingAttackRayAnalyzer as core::default::Default&gt;::default (2,142 samples, 6.42%)</title><rect x="15.3779%" y="101" width="6.4247%" height="15" fill="rgb(231,73,38)" fg:x="5127" fg:w="2142"/><text x="15.6279%" y="111.50">my_chess..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (87 samples, 0.26%)</title><rect x="21.5417%" y="85" width="0.2609%" height="15" fill="rgb(225,20,46)" fg:x="7182" fg:w="87"/><text x="21.7917%" y="95.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (4 samples, 0.01%)</title><rect x="21.8026%" y="101" width="0.0120%" height="15" fill="rgb(210,31,41)" fg:x="7269" fg:w="4"/><text x="22.0526%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::king::King as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (4 samples, 0.01%)</title><rect x="21.8146%" y="101" width="0.0120%" height="15" fill="rgb(221,200,47)" fg:x="7273" fg:w="4"/><text x="22.0646%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (6 samples, 0.02%)</title><rect x="21.8266%" y="101" width="0.0180%" height="15" fill="rgb(226,26,5)" fg:x="7277" fg:w="6"/><text x="22.0766%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (7 samples, 0.02%)</title><rect x="21.8446%" y="101" width="0.0210%" height="15" fill="rgb(249,33,26)" fg:x="7283" fg:w="7"/><text x="22.0946%" y="111.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (5 samples, 0.01%)</title><rect x="21.8656%" y="101" width="0.0150%" height="15" fill="rgb(235,183,28)" fg:x="7290" fg:w="5"/><text x="22.1156%" y="111.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (15 samples, 0.04%)</title><rect x="21.8806%" y="101" width="0.0450%" height="15" fill="rgb(221,5,38)" fg:x="7295" fg:w="15"/><text x="22.1306%" y="111.50"></text></g><g><title>my_chess_ql`__rust_probestack (7 samples, 0.02%)</title><rect x="21.9256%" y="101" width="0.0210%" height="15" fill="rgb(247,18,42)" fg:x="7310" fg:w="7"/><text x="22.1756%" y="111.50"></text></g><g><title>my_chess_ql`core::option::Option&lt;T&gt;::unwrap (19 samples, 0.06%)</title><rect x="21.9466%" y="101" width="0.0570%" height="15" fill="rgb(241,131,45)" fg:x="7317" fg:w="19"/><text x="22.1966%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (132 samples, 0.40%)</title><rect x="22.7175%" y="85" width="0.3959%" height="15" fill="rgb(249,31,29)" fg:x="7574" fg:w="132"/><text x="22.9675%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (900 samples, 2.70%)</title><rect x="23.7672%" y="69" width="2.6995%" height="15" fill="rgb(225,111,53)" fg:x="7924" fg:w="900"/><text x="24.0172%" y="79.50">li..</text></g><g><title>my_chess_ql`__rust_probestack (93 samples, 0.28%)</title><rect x="26.4727%" y="69" width="0.2789%" height="15" fill="rgb(238,160,17)" fg:x="8826" fg:w="93"/><text x="26.7227%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,137 samples, 6.41%)</title><rect x="23.1134%" y="85" width="6.4097%" height="15" fill="rgb(214,148,48)" fg:x="7706" fg:w="2137"/><text x="23.3634%" y="95.50">my_chess..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (924 samples, 2.77%)</title><rect x="26.7516%" y="69" width="2.7714%" height="15" fill="rgb(232,36,49)" fg:x="8919" fg:w="924"/><text x="27.0016%" y="79.50">my..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (211 samples, 0.63%)</title><rect x="28.8902%" y="53" width="0.6329%" height="15" fill="rgb(209,103,24)" fg:x="9632" fg:w="211"/><text x="29.1402%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::king::King as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (104 samples, 0.31%)</title><rect x="29.5231%" y="85" width="0.3119%" height="15" fill="rgb(229,88,8)" fg:x="9843" fg:w="104"/><text x="29.7731%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (78 samples, 0.23%)</title><rect x="29.6011%" y="69" width="0.2340%" height="15" fill="rgb(213,181,19)" fg:x="9869" fg:w="78"/><text x="29.8511%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (363 samples, 1.09%)</title><rect x="29.8350%" y="85" width="1.0888%" height="15" fill="rgb(254,191,54)" fg:x="9947" fg:w="363"/><text x="30.0850%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (186 samples, 0.56%)</title><rect x="30.3659%" y="69" width="0.5579%" height="15" fill="rgb(241,83,37)" fg:x="10124" fg:w="186"/><text x="30.6159%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (41 samples, 0.12%)</title><rect x="30.9748%" y="69" width="0.1230%" height="15" fill="rgb(233,36,39)" fg:x="10327" fg:w="41"/><text x="31.2248%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (220 samples, 0.66%)</title><rect x="31.3737%" y="53" width="0.6599%" height="15" fill="rgb(226,3,54)" fg:x="10460" fg:w="220"/><text x="31.6237%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="32.0336%" y="53" width="0.0210%" height="15" fill="rgb(245,192,40)" fg:x="10680" fg:w="7"/><text x="32.2836%" y="63.50"></text></g><g><title>my_chess_ql`__rust_probestack (186 samples, 0.56%)</title><rect x="32.0546%" y="53" width="0.5579%" height="15" fill="rgb(238,167,29)" fg:x="10687" fg:w="186"/><text x="32.3046%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (966 samples, 2.90%)</title><rect x="31.0978%" y="69" width="2.8974%" height="15" fill="rgb(232,182,51)" fg:x="10368" fg:w="966"/><text x="31.3478%" y="79.50">my..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (461 samples, 1.38%)</title><rect x="32.6125%" y="53" width="1.3827%" height="15" fill="rgb(231,60,39)" fg:x="10873" fg:w="461"/><text x="32.8625%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (104 samples, 0.31%)</title><rect x="33.6833%" y="37" width="0.3119%" height="15" fill="rgb(208,69,12)" fg:x="11230" fg:w="104"/><text x="33.9333%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (210 samples, 0.63%)</title><rect x="34.3281%" y="53" width="0.6299%" height="15" fill="rgb(235,93,37)" fg:x="11445" fg:w="210"/><text x="34.5781%" y="63.50"></text></g><g><title>my_chess_ql`__rust_probestack (108 samples, 0.32%)</title><rect x="34.9670%" y="53" width="0.3239%" height="15" fill="rgb(213,116,39)" fg:x="11658" fg:w="108"/><text x="35.2170%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (290 samples, 0.87%)</title><rect x="35.2909%" y="53" width="0.8698%" height="15" fill="rgb(222,207,29)" fg:x="11766" fg:w="290"/><text x="35.5409%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.16%)</title><rect x="35.9988%" y="37" width="0.1620%" height="15" fill="rgb(206,96,30)" fg:x="12002" fg:w="54"/><text x="36.2488%" y="47.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,192 samples, 3.58%)</title><rect x="33.9952%" y="69" width="3.5753%" height="15" fill="rgb(218,138,4)" fg:x="11334" fg:w="1192"/><text x="34.2452%" y="79.50">my_c..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (470 samples, 1.41%)</title><rect x="36.1608%" y="53" width="1.4097%" height="15" fill="rgb(250,191,14)" fg:x="12056" fg:w="470"/><text x="36.4108%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (60 samples, 0.18%)</title><rect x="37.3905%" y="37" width="0.1800%" height="15" fill="rgb(239,60,40)" fg:x="12466" fg:w="60"/><text x="37.6405%" y="47.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="37.5705%" y="69" width="0.0210%" height="15" fill="rgb(206,27,48)" fg:x="12526" fg:w="7"/><text x="37.8205%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (11 samples, 0.03%)</title><rect x="37.5915%" y="69" width="0.0330%" height="15" fill="rgb(225,35,8)" fg:x="12533" fg:w="11"/><text x="37.8415%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (11 samples, 0.03%)</title><rect x="37.6245%" y="69" width="0.0330%" height="15" fill="rgb(250,213,24)" fg:x="12544" fg:w="11"/><text x="37.8745%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,246 samples, 6.74%)</title><rect x="30.9238%" y="85" width="6.7367%" height="15" fill="rgb(247,123,22)" fg:x="10310" fg:w="2246"/><text x="31.1738%" y="95.50">my_chess_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (464 samples, 1.39%)</title><rect x="38.2424%" y="69" width="1.3917%" height="15" fill="rgb(231,138,38)" fg:x="12750" fg:w="464"/><text x="38.4924%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="39.6341%" y="69" width="0.0180%" height="15" fill="rgb(231,145,46)" fg:x="13214" fg:w="6"/><text x="39.8841%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (166 samples, 0.50%)</title><rect x="39.6521%" y="69" width="0.4979%" height="15" fill="rgb(251,118,11)" fg:x="13220" fg:w="166"/><text x="39.9021%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (426 samples, 1.28%)</title><rect x="40.1500%" y="69" width="1.2777%" height="15" fill="rgb(217,147,25)" fg:x="13386" fg:w="426"/><text x="40.4000%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (97 samples, 0.29%)</title><rect x="41.1368%" y="53" width="0.2909%" height="15" fill="rgb(247,81,37)" fg:x="13715" fg:w="97"/><text x="41.3868%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,229 samples, 6.69%)</title><rect x="37.6605%" y="85" width="6.6857%" height="15" fill="rgb(209,12,38)" fg:x="12556" fg:w="2229"/><text x="37.9105%" y="95.50">my_chess_..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (973 samples, 2.92%)</title><rect x="41.4277%" y="69" width="2.9184%" height="15" fill="rgb(227,1,9)" fg:x="13812" fg:w="973"/><text x="41.6777%" y="79.50">my..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (118 samples, 0.35%)</title><rect x="43.9922%" y="53" width="0.3539%" height="15" fill="rgb(248,47,43)" fg:x="14667" fg:w="118"/><text x="44.2422%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (19 samples, 0.06%)</title><rect x="44.3461%" y="85" width="0.0570%" height="15" fill="rgb(221,10,30)" fg:x="14785" fg:w="19"/><text x="44.5961%" y="95.50"></text></g><g><title>my_chess_ql`__rust_probestack (9 samples, 0.03%)</title><rect x="44.4031%" y="85" width="0.0270%" height="15" fill="rgb(210,229,1)" fg:x="14804" fg:w="9"/><text x="44.6531%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (17 samples, 0.05%)</title><rect x="44.4301%" y="85" width="0.0510%" height="15" fill="rgb(222,148,37)" fg:x="14813" fg:w="17"/><text x="44.6801%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::analysis::positionanalyzer::PositionAnalyzer::calc_all_attacked_squares (7,497 samples, 22.49%)</title><rect x="22.0036%" y="101" width="22.4865%" height="15" fill="rgb(234,67,33)" fg:x="7336" fg:w="7497"/><text x="22.2536%" y="111.50">my_chess_ql`my_chess_ql::game::analy..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (478 samples, 1.43%)</title><rect x="44.4901%" y="101" width="1.4337%" height="15" fill="rgb(247,98,35)" fg:x="14833" fg:w="478"/><text x="44.7401%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (115 samples, 0.34%)</title><rect x="45.5789%" y="85" width="0.3449%" height="15" fill="rgb(247,138,52)" fg:x="15196" fg:w="115"/><text x="45.8289%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (400 samples, 1.20%)</title><rect x="49.1812%" y="85" width="1.1998%" height="15" fill="rgb(213,79,30)" fg:x="16397" fg:w="400"/><text x="49.4312%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (881 samples, 2.64%)</title><rect x="51.1488%" y="69" width="2.6425%" height="15" fill="rgb(246,177,23)" fg:x="17053" fg:w="881"/><text x="51.3988%" y="79.50">li..</text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="53.7912%" y="69" width="0.0180%" height="15" fill="rgb(230,62,27)" fg:x="17934" fg:w="6"/><text x="54.0412%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (122 samples, 0.37%)</title><rect x="53.8092%" y="69" width="0.3659%" height="15" fill="rgb(216,154,8)" fg:x="17940" fg:w="122"/><text x="54.0592%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,120 samples, 6.36%)</title><rect x="50.3809%" y="85" width="6.3587%" height="15" fill="rgb(244,35,45)" fg:x="16797" fg:w="2120"/><text x="50.6309%" y="95.50">my_chess..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (855 samples, 2.56%)</title><rect x="54.1752%" y="69" width="2.5645%" height="15" fill="rgb(251,115,12)" fg:x="18062" fg:w="855"/><text x="54.4252%" y="79.50">my..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (224 samples, 0.67%)</title><rect x="56.0678%" y="53" width="0.6719%" height="15" fill="rgb(240,54,50)" fg:x="18693" fg:w="224"/><text x="56.3178%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::knight::Knight as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (440 samples, 1.32%)</title><rect x="56.7397%" y="85" width="1.3197%" height="15" fill="rgb(233,84,52)" fg:x="18917" fg:w="440"/><text x="56.9897%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (215 samples, 0.64%)</title><rect x="57.4145%" y="69" width="0.6449%" height="15" fill="rgb(207,117,47)" fg:x="19142" fg:w="215"/><text x="57.6645%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (38 samples, 0.11%)</title><rect x="58.1824%" y="69" width="0.1140%" height="15" fill="rgb(249,43,39)" fg:x="19398" fg:w="38"/><text x="58.4324%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (244 samples, 0.73%)</title><rect x="58.6113%" y="53" width="0.7319%" height="15" fill="rgb(209,38,44)" fg:x="19541" fg:w="244"/><text x="58.8613%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="59.3431%" y="53" width="0.0180%" height="15" fill="rgb(236,212,23)" fg:x="19785" fg:w="6"/><text x="59.5931%" y="63.50"></text></g><g><title>my_chess_ql`__rust_probestack (203 samples, 0.61%)</title><rect x="59.3611%" y="53" width="0.6089%" height="15" fill="rgb(242,79,21)" fg:x="19791" fg:w="203"/><text x="59.6111%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::bishop::Bishop as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,056 samples, 3.17%)</title><rect x="58.2963%" y="69" width="3.1674%" height="15" fill="rgb(211,96,35)" fg:x="19436" fg:w="1056"/><text x="58.5463%" y="79.50">my_..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (498 samples, 1.49%)</title><rect x="59.9700%" y="53" width="1.4937%" height="15" fill="rgb(253,215,40)" fg:x="19994" fg:w="498"/><text x="60.2200%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (126 samples, 0.38%)</title><rect x="61.0858%" y="37" width="0.3779%" height="15" fill="rgb(211,81,21)" fg:x="20366" fg:w="126"/><text x="61.3358%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (216 samples, 0.65%)</title><rect x="61.8506%" y="53" width="0.6479%" height="15" fill="rgb(208,190,38)" fg:x="20621" fg:w="216"/><text x="62.1006%" y="63.50"></text></g><g><title>my_chess_ql`__rust_probestack (92 samples, 0.28%)</title><rect x="62.5045%" y="53" width="0.2759%" height="15" fill="rgb(235,213,38)" fg:x="20839" fg:w="92"/><text x="62.7545%" y="63.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (271 samples, 0.81%)</title><rect x="62.7804%" y="53" width="0.8128%" height="15" fill="rgb(237,122,38)" fg:x="20931" fg:w="271"/><text x="63.0304%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (48 samples, 0.14%)</title><rect x="63.4493%" y="37" width="0.1440%" height="15" fill="rgb(244,218,35)" fg:x="21154" fg:w="48"/><text x="63.6993%" y="47.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (1,166 samples, 3.50%)</title><rect x="61.4637%" y="69" width="3.4973%" height="15" fill="rgb(240,68,47)" fg:x="20492" fg:w="1166"/><text x="61.7137%" y="79.50">my_..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (456 samples, 1.37%)</title><rect x="63.5933%" y="53" width="1.3677%" height="15" fill="rgb(210,16,53)" fg:x="21202" fg:w="456"/><text x="63.8433%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (48 samples, 0.14%)</title><rect x="64.8170%" y="37" width="0.1440%" height="15" fill="rgb(235,124,12)" fg:x="21610" fg:w="48"/><text x="65.0670%" y="47.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="64.9610%" y="69" width="0.0210%" height="15" fill="rgb(224,169,11)" fg:x="21658" fg:w="7"/><text x="65.2110%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (17 samples, 0.05%)</title><rect x="64.9820%" y="69" width="0.0510%" height="15" fill="rgb(250,166,2)" fg:x="21665" fg:w="17"/><text x="65.2320%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (5 samples, 0.01%)</title><rect x="65.0330%" y="69" width="0.0150%" height="15" fill="rgb(242,216,29)" fg:x="21682" fg:w="5"/><text x="65.2830%" y="79.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::queen::Queen as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,333 samples, 7.00%)</title><rect x="58.0594%" y="85" width="6.9976%" height="15" fill="rgb(230,116,27)" fg:x="19357" fg:w="2333"/><text x="58.3094%" y="95.50">my_chess_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (461 samples, 1.38%)</title><rect x="65.7708%" y="69" width="1.3827%" height="15" fill="rgb(228,99,48)" fg:x="21928" fg:w="461"/><text x="66.0208%" y="79.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (5 samples, 0.01%)</title><rect x="67.1536%" y="69" width="0.0150%" height="15" fill="rgb(253,11,6)" fg:x="22389" fg:w="5"/><text x="67.4036%" y="79.50"></text></g><g><title>my_chess_ql`__rust_probestack (167 samples, 0.50%)</title><rect x="67.1686%" y="69" width="0.5009%" height="15" fill="rgb(247,143,39)" fg:x="22394" fg:w="167"/><text x="67.4186%" y="79.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (427 samples, 1.28%)</title><rect x="67.6695%" y="69" width="1.2807%" height="15" fill="rgb(236,97,10)" fg:x="22561" fg:w="427"/><text x="67.9195%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (99 samples, 0.30%)</title><rect x="68.6533%" y="53" width="0.2969%" height="15" fill="rgb(233,208,19)" fg:x="22889" fg:w="99"/><text x="68.9033%" y="63.50"></text></g><g><title>my_chess_ql`&lt;my_chess_ql::game::pieces::rook::Rook as my_chess_ql::game::pieces::piece::Piece&gt;::calc_attacked_squares (2,263 samples, 6.79%)</title><rect x="65.0570%" y="85" width="6.7876%" height="15" fill="rgb(216,164,2)" fg:x="21690" fg:w="2263"/><text x="65.3070%" y="95.50">my_chess_..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (965 samples, 2.89%)</title><rect x="68.9502%" y="69" width="2.8944%" height="15" fill="rgb(220,129,5)" fg:x="22988" fg:w="965"/><text x="69.2002%" y="79.50">my..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (127 samples, 0.38%)</title><rect x="71.4637%" y="53" width="0.3809%" height="15" fill="rgb(242,17,10)" fg:x="23826" fg:w="127"/><text x="71.7137%" y="63.50"></text></g><g><title>my_chess_ql`DYLD-STUB$$memcpy (67 samples, 0.20%)</title><rect x="71.8446%" y="85" width="0.2010%" height="15" fill="rgb(242,107,0)" fg:x="23953" fg:w="67"/><text x="72.0946%" y="95.50"></text></g><g><title>my_chess_ql`__rust_probestack (16 samples, 0.05%)</title><rect x="72.0456%" y="85" width="0.0480%" height="15" fill="rgb(251,28,31)" fg:x="24020" fg:w="16"/><text x="72.2956%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (9,258 samples, 27.77%)</title><rect x="72.0936%" y="85" width="27.7684%" height="15" fill="rgb(233,223,10)" fg:x="24036" fg:w="9258"/><text x="72.3436%" y="95.50">my_chess_ql`my_chess_ql::game::pieces::piece:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,763 samples, 8.29%)</title><rect x="91.5747%" y="69" width="8.2873%" height="15" fill="rgb(215,21,27)" fg:x="30531" fg:w="2763"/><text x="91.8247%" y="79.50">libsystem_pl..</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_file_or_diagonal_attacks (19 samples, 0.06%)</title><rect x="99.8620%" y="85" width="0.0570%" height="15" fill="rgb(232,23,21)" fg:x="33294" fg:w="19"/><text x="100.1120%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::analysis::positionanalyzer::PositionAnalyzer::calc_legal_moves (32,746 samples, 98.22%)</title><rect x="1.7157%" y="117" width="98.2184%" height="15" fill="rgb(244,5,23)" fg:x="572" fg:w="32746"/><text x="1.9657%" y="127.50">my_chess_ql`my_chess_ql::game::analysis::positionanalyzer::PositionAnalyzer::calc_legal_moves</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements (18,007 samples, 54.01%)</title><rect x="45.9238%" y="101" width="54.0102%" height="15" fill="rgb(226,81,46)" fg:x="15311" fg:w="18007"/><text x="46.1738%" y="111.50">my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_rank_attacks (5 samples, 0.01%)</title><rect x="99.9190%" y="85" width="0.0150%" height="15" fill="rgb(247,70,30)" fg:x="33313" fg:w="5"/><text x="100.1690%" y="95.50"></text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::add_piece_movement (4 samples, 0.01%)</title><rect x="99.9340%" y="117" width="0.0120%" height="15" fill="rgb(212,68,19)" fg:x="33318" fg:w="4"/><text x="100.1840%" y="127.50"></text></g><g><title>all (33,340 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="33340"/><text x="0.2500%" y="287.50"></text></g><g><title>0x1 (33,340 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="33340"/><text x="0.2500%" y="271.50">0x1</text></g><g><title>libdyld.dylib`start (33,340 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="33340"/><text x="0.2500%" y="255.50">libdyld.dylib`start</text></g><g><title>my_chess_ql`main (33,340 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="33340"/><text x="0.2500%" y="239.50">my_chess_ql`main</text></g><g><title>my_chess_ql`std::rt::lang_start (33,340 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="33340"/><text x="0.2500%" y="223.50">my_chess_ql`std::rt::lang_start</text></g><g><title>my_chess_ql`std::rt::lang_start_internal (33,340 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="33340"/><text x="0.2500%" y="207.50">my_chess_ql`std::rt::lang_start_internal</text></g><g><title>my_chess_ql`std::rt::lang_start::_{{closure}} (33,339 samples, 100.00%)</title><rect x="0.0030%" y="181" width="99.9970%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="33339"/><text x="0.2530%" y="191.50">my_chess_ql`std::rt::lang_start::_{{closure}}</text></g><g><title>my_chess_ql`std::sys_common::backtrace::__rust_begin_short_backtrace (33,339 samples, 100.00%)</title><rect x="0.0030%" y="165" width="99.9970%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="33339"/><text x="0.2530%" y="175.50">my_chess_ql`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>my_chess_ql`core::ops::function::FnOnce::call_once (33,339 samples, 100.00%)</title><rect x="0.0030%" y="149" width="99.9970%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="33339"/><text x="0.2530%" y="159.50">my_chess_ql`core::ops::function::FnOnce::call_once</text></g><g><title>my_chess_ql`my_chess_ql::main (33,306 samples, 99.90%)</title><rect x="0.1020%" y="133" width="99.8980%" height="15" fill="rgb(205,117,38)" fg:x="34" fg:w="33306"/><text x="0.3520%" y="143.50">my_chess_ql`my_chess_ql::main</text></g><g><title>my_chess_ql`my_chess_ql::game::pieces::piece::Piece::calc_movements (18 samples, 0.05%)</title><rect x="99.9460%" y="117" width="0.0540%" height="15" fill="rgb(237,72,25)" fg:x="33322" fg:w="18"/><text x="100.1960%" y="127.50"></text></g></svg></svg>